from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dependencies import current_user
from auth.models import User
from settings import get_async_session

router = APIRouter(
    prefix="/subscriptions",
    tags=["Subscriptions üîî"]
)


@router.post("/follow/{user_id}", summary="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def toggle_follow_user(
        user_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user)
):
    await session.refresh(current_user, attribute_names=["following"])

    # TODO –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    stmt = select(User).where(User.id == user_id)
    result = await session.execute(stmt)
    user_to_follow = result.scalars().first()

    if not user_to_follow:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user_to_follow in current_user.following:
        current_user.following.remove(user_to_follow)
        await session.commit()
        return {"message": f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {user_to_follow.username}"}
    # TODO —É–±—Ä–∞—Ç—å else
    else:
        current_user.following.append(user_to_follow)
        await session.commit()
        return {"message": f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {user_to_follow.username}"}
