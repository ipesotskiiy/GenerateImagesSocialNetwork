from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from auth.models import User
from categories.models import Category
from communities.models import Community, CommunityMembership, CommunityRoleEnum
from communities.schemas import CreateCommunity, UpdateCommunity
from dependencies import current_user
from posts.models import Post
from posts.schemas import PostCreate, PostUpdate
from settings import get_async_session

router = APIRouter(
    prefix="/communities",
    tags=["Communities üë™"]
)


@router.get("/all/", summary="–í–∑—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
async def get_all_communities(session: AsyncSession = Depends(get_async_session)):
    query = select(Community).order_by(Community.id)
    result = await session.execute(query)
    communities = result.scalars().all()

    return [
        {
            "id": community.id,
            "name": community.name,
            "description": community.description
        }
        for community in communities
    ]


@router.get("/{community_id}/", summary="–í–∑—è—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def get_community(community_id: int, session: AsyncSession = Depends(get_async_session)):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return {
        "id": community.id,
        "name": community.name,
        "description": community.description
    }


@router.post("/create/", summary="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def create_community(
        data_for_new_community: CreateCommunity,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    community_data = data_for_new_community.dict()
    community_data["creator_id"] = current_user.id

    new_community = Community(**community_data)
    session.add(new_community)
    await session.flush()

    membership = CommunityMembership(
        user_id=current_user.id,
        community_id=new_community.id,
        role=CommunityRoleEnum.admin
    )
    session.add(membership)
    await session.commit()

    return {"status": "Created", "community_id": new_community.id}


@router.patch("/update/{community_id}/", summary="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def update_community(
        community_id: int,
        community_data: UpdateCommunity,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session),
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    existing_community = result.scalars().first()

    if not existing_community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if existing_community.creator_id != current_user.id:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    existing_community.name = community_data.name
    existing_community.description = community_data.description

    session.add(existing_community)

    await session.commit()
    await session.refresh(existing_community)

    return {"status": "Updated"}


@router.delete("/delete/{community_id}/", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def delete_community(
        community_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    existing_community = result.scalars().first()

    if not existing_community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if existing_community.creator_id != current_user.id:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    await session.delete(existing_community)
    await session.commit()

    return {"status": "Deleted", "id": community_id}


@router.post("/{community_id}/assign_moderator/{user_id}/", summary="–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def assign_moderator(
        community_id: int,
        user_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    # todo –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É —Å –±–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä—Ä–µ–∫—Ç–æ—Ä–∏—é
    #######################
    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )

    result = await session.execute(query)
    #########################
    current_membership = result.scalars().first()

    if not current_membership or current_membership.role != CommunityRoleEnum.admin:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")

    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == user_id
    )
    result = await session.execute(query)
    membership = result.scalars().first()

    if not membership:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    membership.role = CommunityRoleEnum.moderator
    session.add(membership)

    await session.commit()

    return {"status": "Role updated", "user_id": user_id, "role": membership.role.value}


@router.delete("/{community_id}/remove_user/{user_id}/", summary="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
async def remove_user(
        community_id: int,
        user_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )
    result = await session.execute(query)
    current_membership = result.scalars().first()

    if not current_membership:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == user_id
    )
    result = await session.execute(query)
    target_membership = result.scalars().first()

    if not target_membership:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    if current_membership.role == CommunityRoleEnum.moderator and target_membership.role != CommunityRoleEnum.user:
        raise HTTPException(status_code=403, detail="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    await session.delete(target_membership)
    await session.commit()

    return {"status": "User removed", "user_id": user_id}


@router.post("/{community_id}/subscribe/", summary="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
async def toggle_subscription(
        community_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )
    result = await session.execute(query)
    membership = result.scalars().first()

    if membership:
        await session.delete(membership)
        await session.commit()
        return {"status": "unsubscribed", "community_id": community_id}
    # TODO —É–±—Ä–∞—Ç—å else
    else:
        new_membership = CommunityMembership(
            user_id=current_user.id,
            community_id=community_id,
            role=CommunityRoleEnum.user
        )
        session.add(new_membership)
        await session.commit()
        return {"status": "subscribed", "community_id": community_id}


@router.post("/{community_id}/posts/", summary="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def create_post_in_community(
        community_id: int,
        post_data: PostCreate,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )
    result = await session.execute(query)
    membership = result.scalars().first()

    if not membership:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    if membership.role not in [CommunityRoleEnum.admin, CommunityRoleEnum.moderator]:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")

    new_post = Post(
        title=post_data.title,
        content=post_data.content,
        user_id=current_user.id,
        community_id=community_id
    )
    try:
        categories_objects = []
        for cat_name in post_data.categories:
            result = await session.execute(select(Category).filter_by(name=cat_name))
            category_obj = result.scalar_one_or_none()
            categories_objects.append(category_obj)
    # TODO –ø–æ–¥–æ—é—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Exception
    except Exception:
        raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    if not categories_objects:
        raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    new_post.categories = categories_objects

    session.add(new_post)
    await session.commit()
    await session.refresh(new_post)

    return {"status": "Post created", "post_id": new_post.id}


@router.get("/{community_id}/posts/", summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")
async def get_all_posts_in_community(
        community_id: int,
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    query = select(Post).where(Post.community_id == community_id).order_by(Post.created_at.desc())
    result = await session.execute(query)
    posts = result.scalars().all()

    return posts


@router.get("/{community_id}/posts/{post_id}/", summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")
async def get_post_in_community(
        community_id: int,
        post_id: int,
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    query = select(Post).where(
        Post.id == post_id,
        Post.community_id == community_id
    )
    result = await session.execute(query)
    post = result.scalars().first()

    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return post


@router.patch("/{community_id}/posts/{post_id}/", summary="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")
async def update_post_in_community(
        community_id: int,
        post_id: int,
        post_update: PostUpdate,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )
    result = await session.execute(query)
    membership = result.scalars().first()

    if not membership or membership.role not in [CommunityRoleEnum.admin, CommunityRoleEnum.moderator]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    query = select(Post).where(
        Post.id == post_id,
        Post.community_id == community_id
    )
    result = await session.execute(query)
    post = result.scalars().first()

    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if post_update.title is not None:
        post.title = post_update.title
    if post_update.content is not None:
        post.content = post_update.content

    session.add(post)
    await session.commit()
    await session.refresh(post)

    return {"status": "Post updated", "post_id": post.id}


@router.delete("/{community_id}/posts/{post_id}/", summary="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")
async def delete_post_in_community(
        community_id: int,
        post_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Å –ø—Ä–∞–≤–∞–º–∏ admin –∏–ª–∏ moderator
    query = select(CommunityMembership).where(
        CommunityMembership.community_id == community_id,
        CommunityMembership.user_id == current_user.id
    )
    result = await session.execute(query)
    membership = result.scalars().first()

    if not membership or membership.role not in [CommunityRoleEnum.admin, CommunityRoleEnum.moderator]:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤—É
    query = select(Post).where(
        Post.id == post_id,
        Post.community_id == community_id
    )
    result = await session.execute(query)
    post = result.scalars().first()

    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await session.delete(post)
    await session.commit()

    return {"status": "Post deleted", "post_id": post_id}
