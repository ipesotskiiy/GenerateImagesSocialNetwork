from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy import select, insert
from sqlalchemy.ext.asyncio import AsyncSession

from auth.models import User
from communities.models import Community
from communities.schemas import CreateCommunity, UpdateCommunity
from dependencies import current_user
from settings import get_async_session

router = APIRouter(
    prefix="/communities",
    tags=["Communities üë™"]
)


@router.get("/all/", summary="–í–∑—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
async def get_all_communities(session: AsyncSession = Depends(get_async_session)):
    query = select(Community).order_by(Community.id)
    result = await session.execute(query)
    communities = result.scalars().all()

    return [
        {
            "id": community.id,
            "name": community.name,
            "description": community.description
        }
        for community in communities
    ]


@router.get("/{community_id}/", summary="–í–∑—è—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def get_community(community_id: int, session: AsyncSession = Depends(get_async_session)):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    community = result.scalars().first()

    if not community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return {
        "id": community.id,
        "name": community.name,
        "description": community.description
    }


@router.post("/create/", summary="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def create_community(
    new_community: CreateCommunity,
    current_user: User = Depends(current_user),
    session: AsyncSession = Depends(get_async_session)
):
    community_data = new_community.dict()
    community_data["creator_id"] = current_user.id

    stmt = insert(Community).values(**community_data)
    await session.execute(stmt)
    await session.commit()
    return {"status": "Created"}


@router.patch("/update/{community_id}/", summary="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def update_community(
        community_id: int,
        community_data: UpdateCommunity,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session),
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    existing_community = result.scalars().first()

    if not existing_community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if existing_community.creator_id != current_user.id:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    existing_community.name = community_data.name
    existing_community.description = community_data.description

    session.add(existing_community)
    await session.commit()
    await session.refresh(existing_community)

    return {"status": "Updated"}


@router.delete("/delete/{community_id}/", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
async def delete_community(
        community_id: int,
        current_user: User = Depends(current_user),
        session: AsyncSession = Depends(get_async_session)
):
    query = select(Community).where(Community.id == community_id)
    result = await session.execute(query)
    existing_community = result.scalars().first()

    if not existing_community:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if existing_community.creator_id != current_user.id:
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    await session.delete(existing_community)
    await session.commit()
    return {"status": "Deleted", "id": community_id}
