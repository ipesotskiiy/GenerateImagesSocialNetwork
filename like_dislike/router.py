from typing import Union

from fastapi import (
    APIRouter,
    Depends,
    HTTPException
)
from sqlalchemy.ext.asyncio import AsyncSession

from auth.models import User
from comments.models import Comment
from like_dislike.models import Like, Dislike
from like_dislike.reaction_db_interface import ReactionDBInterface
from like_dislike.schemas import LikeCreate, DislikeCreate, LikeResponse, DislikeResponse
from posts.models import Post
from settings import get_async_session
from dependencies import current_user

like_router = APIRouter(
    prefix="/likes",
    tags=["Likes ‚ù§Ô∏è"]
)

dislike_router = APIRouter(
    prefix="/dislikes",
    tags=["Dislikes üíî"]
)

reaction_db_interface = ReactionDBInterface()

async def toggle_reaction(reaction_data: Union[LikeResponse, DislikeResponse], session: AsyncSession = Depends(get_async_session)):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏—è –ª–∞–π–∫–∞ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫–∞.
    - –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —É–∂–µ —Å—Ç–æ–∏—Ç, —Ç–æ –æ–Ω–∞ —Å–Ω–∏–º–∞–µ—Ç—Å—è.
    - –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç—Å—è,
      –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
    if reaction_data.__class__.__name__ == "LikeCreate":
        Model = Like
        OppositeModel = Dislike
        reaction_name = "–ª–∞–π–∫"
    else:
        Model = Dislike
        OppositeModel = Like
        reaction_name = '–¥–∏–∑–ª–∞–π–∫'

    existing_reaction = await reaction_db_interface.fetch_one(session, Model, reaction_data)

    existing_opposite = await reaction_db_interface.fetch_one(session, OppositeModel, reaction_data)

    if existing_reaction:
        # –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —É–∂–µ —Å—Ç–æ–∏—Ç ‚Äì —Å–Ω–∏–º–∞–µ–º –µ—ë
        await session.delete(existing_reaction)
        await session.commit()
        return {"message": f"{reaction_name.capitalize()} —É–±—Ä–∞–Ω", "id": existing_reaction.id}
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì —É–¥–∞–ª—è–µ–º –µ—ë
        if existing_opposite:
            await session.delete(existing_opposite)
            await session.commit()
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
        new_reaction = Model(**reaction_data.dict())
        session.add(new_reaction)
        await session.commit()
        await session.refresh(new_reaction)
        return new_reaction


@like_router.post("/post/{post_id}/like", summary="–ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç")
async def toggle_like_post(
        post_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user),
):
    """
    –¢–æ–≥–≥–ª –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞:
    - –ï—Å–ª–∏ –ª–∞–π–∫–∞ –Ω–µ—Ç -> —Å–æ–∑–¥–∞—ë—Ç
    - –ï—Å–ª–∏ –ª–∞–π–∫ —É–∂–µ –µ—Å—Ç—å -> —É–¥–∞–ª—è–µ—Ç
    """
    post = await session.get(Post, post_id)
    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    like_data = LikeCreate(
        user_id=current_user.id,
        content_id=post_id,
        content_type="post"
    )

    return await toggle_reaction(like_data, session)


@like_router.post("/comment/{comment_id}/like", summary="–ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
async def toggle_like_comment(
        comment_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user),
):
    comment = await session.get(Comment, comment_id)
    if not comment:
        raise HTTPException(status_code=404, detail="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")

    like_data = LikeCreate(
        user_id=current_user.id,
        content_id=comment_id,
        content_type="comment"
    )

    return await toggle_reaction(like_data, session)


@dislike_router.post("/post/{post_id}/dislike", summary="–ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç")
async def toggle_dislike_post(
        post_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user)
):
    """
    –¢–æ–≥–≥–ª –¥–∏–∑–ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞:
    - –ï—Å–ª–∏ –¥–∏–∑–ª–∞–π–∫–∞ –Ω–µ—Ç -> —Å–æ–∑–¥–∞—ë—Ç
    - –ï—Å–ª–∏ –¥–∏–∑–ª–∞–π–∫ —É–∂–µ –µ—Å—Ç—å -> —É–¥–∞–ª—è–µ—Ç
    """
    post = await session.get(Post, post_id)
    if not post:
        raise HTTPException(status_code=404, detail="–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    dislike_data = DislikeCreate(
        user_id=current_user.id,
        content_id=post_id,
        content_type="post"
    )

    return await toggle_reaction(dislike_data, session)


@dislike_router.post("/comment/{comment_id}/dislike", summary="–ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –¥–∏–∑–ª–∞–π–∫ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
async def toggle_dislike_comment(
        comment_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user)
):
    comment = await session.get(Comment, comment_id)
    if not comment:
        raise HTTPException(status_code=404, detail="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")

    dislike_data = DislikeCreate(
        user_id=current_user.id,
        content_id=comment_id,
        content_type="comment"
    )

    return await toggle_reaction(dislike_data, session)
