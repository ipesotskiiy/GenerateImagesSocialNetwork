from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy import select
from sqlalchemy.engine import Result
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from auth.models import User
from categories.models import Category
from posts.models import Post
from posts.schemas import PostCreate, PostUpdate, PostRead
from settings import get_async_session
from dependencies import current_user

router = APIRouter(
    prefix="/posts",
    tags=["Posts üìñ"]

)


@router.get("/all/", response_model=List[PostRead], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã")
async def get_all_posts(session: AsyncSession = Depends(get_async_session)):
    query = select(Post).options(selectinload(Post.categories)).order_by(Post.id)
    result: Result = await session.execute(query)
    posts = result.scalars().all()

    post_list = [
        {
            "id": post.id,
            "title": post.title,
            "content": post.content,
            "created_at": post.created_at,
            "categories": [category.name for category in post.categories],
            "user_id": post.user_id,
        }
        for post in posts
    ]

    return post_list


@router.get('/{post_id}/', response_model=PostRead, summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç")
async def get_post(post_id: int, session: AsyncSession = Depends(get_async_session)):
    query = select(Post).where(Post.id == post_id).options(selectinload(Post.categories))
    result: Result = await session.execute(query)
    post = result.scalars().first()

    if not post:
        raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    post_dict = {
        "id": post.id,
        "title": post.title,
        "content": post.content,
        "created_at": post.created_at,
        "updated_at": post.updated_at,
        "categories": [category.name for category in post.categories],  # –ó–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        "user_id": post.user_id,
    }

    return post_dict


@router.post('/create/', summary="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def add_post(new_post: PostCreate, session: AsyncSession = Depends(get_async_session)):
    post_data = new_post.dict(exclude={"categories"})
    post = Post(**post_data)

    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—â–µ–º –æ–±—ä–µ–∫—Ç Category
    categories_objects = []
    for cat_name in new_post.categories:
        # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        result = await session.execute(select(Category).filter_by(name=cat_name))
        category_obj = result.scalar_one_or_none()

        categories_objects.append(category_obj)

    # 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
    #   (post.categories - —ç—Ç–æ relationship —á–µ—Ä–µ–∑ secondary=post_categories)
    post.categories = categories_objects

    # 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –ø–æ—Å—Ç –≤ —Å–µ—Å—Å–∏—é, –∫–æ–º–º–∏—Ç–∏–º
    session.add(post)
    await session.commit()
    # –û–±–Ω–æ–≤–∏–º –ø–æ–ª—è post (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π id)
    await session.refresh(post)

    return {"status": "Created", "id": post.id}


@router.patch("/update/{post_id}/", summary="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç")
async def update_post(
        post_id: int,
        post_data: PostUpdate,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user)
):
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    query = select(Post).where(Post.id == post_id).options(selectinload(Post.categories))
    result: Result = await session.execute(query)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .scalars() –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –∑–∞—Ç–µ–º first()
    existing_post = result.scalars().first()
    if not existing_post:
        raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    if existing_post.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç."
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    existing_post.title = post_data.title
    existing_post.content = post_data.content
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    category_query = select(Category).where(Category.name.in_(post_data.categories))
    category_result = await session.execute(category_query)
    categories = category_result.scalars().all()

    existing_post.categories = categories  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Category
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    session.add(existing_post)
    await session.commit()
    await session.refresh(existing_post)

    return {"status": "Updated"}


@router.delete("/delete/{post_id}/", summary="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç üí£")
async def delete_post(
        post_id: int,
        session: AsyncSession = Depends(get_async_session),
        current_user: User = Depends(current_user)
):
    query = select(Post).where(Post.id == post_id)
    result: Result = await session.execute(query)
    existing_post = result.scalars().first()

    if not existing_post:
        raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if existing_post.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"
        )

    await session.delete(existing_post)
    await session.commit()

    return {"status": "Deleted", "id": post_id}
